/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Not(in=instruction[15], out=notInstr15);
    Or(a=notInstr15, b=instruction[5], out=loadRegisterA);
    And(a=instruction[15], b=instruction[4], out=loadRegisterD);
    And(a=instruction[15], b=instruction[3], out=writeM,out=loadMemory);
    
    DRegister(in=outMemory, load=loadRegisterD, out=outRegisterD);
    Mux16(a=instruction, b=outMemory, sel=instruction[15], out=instructionAorC);
    ARegister(in=instructionAorC, load=loadRegisterA, out[0..14]=addressM, out=outRegisterA);
    Mux16(a=outRegisterA, b=inM, sel=instruction[12], out=compAorM);
    ALU(x=outRegisterD, y=compAorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM,out=outMemory, zr=outZr, ng=outNg);
    
    Or(a=outZr, b=outNg, out=zrOrNg);
    Not(in=zrOrNg, out=outPos);
    //And(a=instruction[0], b=instruction[1], out=instr0And1);
    //And(a=instr0And1, b=instruction[2], out=uncondJump);
    And(a=instruction[0], b=outPos, out=jumpIfPos);
    And(a=instruction[1], b=outZr, out=jumpIfZr);
    And(a=instruction[2], b=outNg, out=jumpIfNg);
    Or(a=jumpIfNg, b=jumpIfZr, out=jumpLoad1);
    Or(a=jumpLoad1, b=jumpIfPos, out=jumpLoad2);
    And(a=jumpLoad2, b=instruction[15], out=jumpLoad);
    PC(in=outRegisterA, load=jumpLoad, inc=true, reset=reset, out[0..14]=pc);        
}