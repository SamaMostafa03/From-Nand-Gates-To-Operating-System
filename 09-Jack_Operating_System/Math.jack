/** A library of commonly used mathematical functions.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    function void init() {
        let n=1;
        let powersOfTwo = Array.new(16);
        let powersOfTwo[0] = 1;
        while(n<16)
        {
            powersOfTwo[n] = powersOfTwo[n-1] + powersOfTwo[n-1];
            let n = n+1;
        }   
    }

    /**
    Checks if the bit is 1 by logical and of n and 2^(bit index)
    if n & 2^(bit index) == 0 ->zero bit
    else -> 1 bit
    */
    function boolean isOneBit(int x, int index)
    {
        return (x & powersOfTwo[index]) > 0;
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
        var int i, sum, shiftedX;
        let sum = 0;
        let shiftedX = x;
        let i = 0;
        while(i<n)
        {
            if(Math.isOneBit(y,i))
            {
                let sum = sum+shiftedX;
            }
            shiftedX = shiftedX + shiftedX;
            let i = i+1;
        }
        return sum;
    }

    /** Returns the integer part of x / y.*/
    function int divide(int x, int y) {
        if (y > x) {return 0;}

        // Check for possible negative division
        var boolean negResult;
        if(x<0 && y<0 || x>0&&y>0) { let negResult=false; }
        else { let negResult=true; }
        
        if (negativeResult) {return -Math.recursiveDivision(Math.abs(x), Math.abs(y));}
        return Math.recursiveDivision(x, y);
    }

    /** Recursive function for non-negative division */
    function int recursiveDivision(int x, int y) {
        var int quotient;
        if ((y > x) | (y < 0)) {return 0;} // Base case
        let quotient = Math.recursiveDivision(x, y + y);
        if ((x - ((quotient + quotient) * y)) < y) {
            return quotient + quotient;
        }
        else {
            return (quotient + quotient) + 1;
        }
    }

    /** Returns the integer part of the square root of x.
    todo: optimize the algorithm
    */
    function int sqrt(int x) {
        var int i;
        let i = 1;
        while (i * i <= x) {
            if (i * i == x) {
                return i;
            }
            let i = i + 1;
        }
        return i - 1;
    }

    /** Returns the greater value.*/
    function int max(int a, int b) {
        if(a>b) {return a;}
        return b;
    }

    /** Returns the smaller value.*/
    function int min(int a, int b) {
        if(a<b) {return a;}
        return b;
    }

    /** Returns the absolute value of x*/
    function int abs(int x) {
        if(x<0) {x = -x;}
        return x;
    }
}
